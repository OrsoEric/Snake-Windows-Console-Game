/**********************************************************************************
**	ENVIROMENT VARIABILE
**********************************************************************************/

#ifndef MY_UTILS_H_
	#define MY_UTILS_H_

/**********************************************************************************
**	GLOBAL INCLUDES
**********************************************************************************/

/**********************************************************************************
**	DEFINES
**********************************************************************************/

//Rnge at which a floating point interpolation is used inside get_rand<int>
#define GET_RAND_INTERPOLATION_THRESHOLD	256

/**********************************************************************************
**	MACROS
**********************************************************************************/

#define ABS(x) \
	(((x) < 0.0)?(-(x)):(x))


#define CLIP_PI( x, pi )	\
	(x>pi/2)?(x -pi):((x<-pi/2)?(pi +x):(x))


//Return a C style string of an engineering style number
#define ENG_NUM_CSTR( x )	\
	(&User::My_utils::eng_num( (x) )[0])

/**********************************************************************************
**	TYPEDEF
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: STRUCTURE
**********************************************************************************/

/**********************************************************************************
**	PROTOTYPE: GLOBAL VARIABILE
**********************************************************************************/

/**********************************************************************************
**	NAMESPACE
**********************************************************************************/

//Assign class to a namespace
namespace User
{

/**********************************************************************************
**	PROTOTYPE: CLASS
**********************************************************************************/

/****************************************************************************
**	Class
**
*****************************************************************************
**	PARAMETER:
**	RETURN:
**	DESCRIPTION:
****************************************************************************/

class My_utils
{
	//Visible to all
	public:
		///--------------------------------------------------------------------------
		///	CONSTRUCTORS
		///--------------------------------------------------------------------------

		//Empty constructor
		My_utils( void );

		///--------------------------------------------------------------------------
		///	DESTRUCTORS
		///--------------------------------------------------------------------------

		//Default constructor
		~My_utils( void );

		///--------------------------------------------------------------------------
		///	SETTERS
		///--------------------------------------------------------------------------

		///--------------------------------------------------------------------------
		///	GETTERS
		///--------------------------------------------------------------------------

		///--------------------------------------------------------------------------
		///	TESTERS
		///--------------------------------------------------------------------------

		///--------------------------------------------------------------------------
		///	PUBLIC METHODS
		///--------------------------------------------------------------------------

			///--------------------------------------------------------------------------
			///	RANDOM NUMBER UTILITIES
			///--------------------------------------------------------------------------

		//Initialize random number generator
		static bool rand_init( void );
		//Template get random for types that do not need range. (bool) probability to get a true
		template <typename T>
		static T get_rand( float p );
		//Template get random for given types. Overload get_rand<T>(void)
		template <typename T>
		static T get_rand( T min, T max );

			///--------------------------------------------------------------------------
			///	STRING UTILITIES
			///--------------------------------------------------------------------------

		//From number to engineering format number
		static std::string eng_num( double num );

		///--------------------------------------------------------------------------
		///	PUBLIC VARS
		///--------------------------------------------------------------------------

	//Visible to derived classes
	protected:
		///--------------------------------------------------------------------------
		///	PROTECTED METHODS
		///--------------------------------------------------------------------------

		///--------------------------------------------------------------------------
		///	PROTECTED VARS
		///--------------------------------------------------------------------------

	//Visible only inside the class
	private:
		///--------------------------------------------------------------------------
		///	PRIVATE METHODS
		///--------------------------------------------------------------------------
		//Here so that i can easily copy the code.
		bool dummy( void );

		///--------------------------------------------------------------------------
		///	PRIVATE VARS
		///--------------------------------------------------------------------------

};	//End Class: My_utils

/**********************************************************************************
**	NAMESPACE
**********************************************************************************/

} //End Namespace

#else
    #warning "Multiple inclusion of header file"
#endif
